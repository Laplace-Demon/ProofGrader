From MParser Require Import ExplicitName.
From MParser Require Import Lang.
From MParser Require Import Poly.
From MParser Require Import Solver.
From MParser Require Import Elaborator.
From MParser Require Import Checker.
Require Import String.
Require Import ZArith.
Require Import List.
Local Open Scope Z.
Local Open Scope string.
Local Open Scope list.
Import ListNotations.
Definition premise: list prop :=
(PBinPred PROP.RGt (TVar "epss")(TNum 0))::(PBinPred PROP.RGt (TVar "delta")(TNum 0))::(PBinPred PROP.RGe (TApply (TVar "x" ) (TVar "1" ))(TNum 0))::(PBinPred PROP.RGe (TApply (TVar "x" ) (TVar "2" ))(TNum 0))::(PBinPred PROP.RLe  (TUnOp TERM.RAbs ((TBinOp TERM.RMinus ((TApply (TVar "x" ) (TVar "1" ))) ((TApply (TVar "x" ) (TVar "2" ))))))(TVar "delta"))::(PBinPred PROP.REq (TVar "delta")(TBinOp TERM.RMin ((TBinOp TERM.RDiv ((TBinOp TERM.RPower ((TVar "epss")) ((TNum 2)))) ((TNum 2))))((TBinOp TERM.RDiv ((TBinOp TERM.RPower ((TConst TERM.RPi)) ((TNum 2)))) ((TNum 2))))))::(PBinPred PROP.RGe (TApply (TVar "x" ) (TVar "1" ))(TApply (TVar "x" ) (TVar "2" )))::nil. 
Module Goal001.
Definition stmt: prop :=
(PBinPred PROP.RLe  (TUnOp TERM.RAbs ((TBinOp TERM.RMinus ((TUnOp TERM.RCos ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))))) ((TUnOp TERM.RCos ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))))))(TVar "epss")).
(*Proof starts here*)
Definition pr: proof :=
(((PrPoseWithoutProof 12 14 PROOF.FNoHint)(PBinPred PROP.RGe (TBinOp TERM.RMinus ((TApply (TVar "x" ) (TVar "1" ))) ((TApply (TVar "x" ) (TVar "2" ))))(TNum 0)))
((((PrPoseWithoutProof 15 17 PROOF.FNoHint)(PLongOrder PROP.REq ((TBinOp TERM.RMinus ((TApply (TVar "x" ) (TVar "1" ))) ((TApply (TVar "x" ) (TVar "2" ))))) (PBinPred PROP.RLe  (TUnOp TERM.RAbs ((TBinOp TERM.RMinus ((TApply (TVar "x" ) (TVar "1" ))) ((TApply (TVar "x" ) (TVar "2" ))))))(TVar "delta"))))
((((PrPoseWithoutProof 18 20 PROOF.FNoHint)(PBinPred PROP.RLe (TNum 0)(TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))))
((((PrPoseWithoutProof 21 23 PROOF.FNoHint)(PLongOrder PROP.RLe ((TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))) ((PLongOrder PROP.REq ((TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RPlus ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))) ((TBinOp TERM.RMult ((TNum 2)) ((TVar "delta")))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))) ((PLongOrder PROP.RLe ((TBinOp TERM.RDiv ((TVar "delta")) ((TBinOp TERM.RPlus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RPlus ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))) ((TBinOp TERM.RMult ((TNum 2)) ((TVar "delta")))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))))) (PBinPred PROP.RLe (TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RDiv ((TVar "delta")) ((TNum 2)))))(TBinOp TERM.RDiv ((TConst TERM.RPi)) ((TNum 2))))))))))
((((PrPoseWithoutProof 24 26 PROOF.FNoHint)(PBinPred PROP.RLe (TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RDiv ((TVar "delta")) ((TNum 2)))))(TBinOp TERM.RDiv ((TConst TERM.RPi)) ((TNum 2)))))
((((PrPoseWithoutProof 27 29 PROOF.FNoHint)(PLongOrder PROP.RLe ((TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))) ((PLongOrder PROP.REq ((TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RPlus ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))) ((TBinOp TERM.RMult ((TNum 2)) ((TVar "delta")))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))) (PBinPred PROP.RLe (TBinOp TERM.RDiv ((TVar "delta")) ((TBinOp TERM.RPlus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RPlus ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))) ((TBinOp TERM.RMult ((TNum 2)) ((TVar "delta")))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))))(TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RDiv ((TVar "delta")) ((TNum 2))))))))))
((((PrPoseWithoutProof 30 32 PROOF.FNoHint)(PLongOrder PROP.RLe ((TNum 0)) ((PLongOrder PROP.RLe ((TUnOp TERM.RSin ((TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))))) ((PLongOrder PROP.RLe ((TUnOp TERM.RSin ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RDiv ((TVar "delta")) ((TNum 2)))))))) (PBinPred PROP.RLe (TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RDiv ((TVar "delta")) ((TNum 2)))))(TBinOp TERM.RDiv ((TVar "epss")) ((TNum 2))))))))))
((((PrPoseWithoutProof 33 35 PROOF.FNoHint)(PBinPred PROP.RLe  (TUnOp TERM.RAbs ((TUnOp TERM.RSin ((TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))))))(TBinOp TERM.RDiv ((TVar "epss")) ((TNum 2)))))
((((PrPoseWithoutProof 36 38 PROOF.FNoHint)(PLongOrder PROP.REq ( (TUnOp TERM.RAbs ((TBinOp TERM.RMinus ((TUnOp TERM.RCos ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))))) ((TUnOp TERM.RCos ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))))))) ((PLongOrder PROP.REq ( (TUnOp TERM.RAbs ((TUnOp TERM.RNeg ((TBinOp TERM.RMult ((TBinOp TERM.RMult ((TNum 2)) ((TUnOp TERM.RSin ((TBinOp TERM.RDiv ((TBinOp TERM.RPlus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))))))) ((TUnOp TERM.RSin ((TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))))))))))) ((PLongOrder PROP.REq ( (TUnOp TERM.RAbs ((TBinOp TERM.RMult ((TBinOp TERM.RMult ((TNum 2)) ((TUnOp TERM.RSin ((TBinOp TERM.RDiv ((TBinOp TERM.RPlus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))))))) ((TUnOp TERM.RSin ((TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))))))))) (PBinPred PROP.RLe (TBinOp TERM.RMult ((TBinOp TERM.RMult ((TNum 2)) ( (TUnOp TERM.RAbs ((TUnOp TERM.RSin ((TBinOp TERM.RDiv ((TBinOp TERM.RPlus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))))))))) ( (TUnOp TERM.RAbs ((TUnOp TERM.RSin ((TBinOp TERM.RDiv ((TBinOp TERM.RMinus ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "1" ))))))) ((TBinOp TERM.RSqrt (TNum 2) ((TBinOp TERM.RMult ((TNum 2)) ((TApply (TVar "x" ) (TVar "2" ))))))))) ((TNum 2)))))))))(TVar "epss"))))))))
((PrConclWithoutProof 39 39 PROOF.FNoHint))))))))))))))))))).


Definition assum := get_assum premise nil.
Definition pg := {| assu := assum; concl := stmt; cont := nil|}.
Definition temp := elaboration pg pr.
Definition pg' := fst temp.
Definition pr' := snd temp.
Definition check_result := fst (check_rec' pg' pr').
Compute check_result.
End Goal001.
